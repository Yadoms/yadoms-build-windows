# Appveyor script to build and deploy Yadoms for Windows

environment:
  # Set here the branch (from original yadoms repository) to build and deploy
  buildBranch: 2_0_0-rc_1

# version format
version: 1.0.{build}

# Build worker image (VM template)
image: Visual Studio 2015

#---------------------------------#
#       build configuration       #
#---------------------------------#

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
platform: Win32

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

init:
  - ps: echo "`n### Build and deploy Yadoms from $env:buildBranch branch`n`n"
  

# Add pre-compiled dependancies in cache
cache:
  - extra_libs\boost_1_61_0 -> '.appveyor.yml'
  - extra_libs\poco-1.7.7-all -> '.appveyor.yml'
  - extra_libs\OpenSSL-1.1.0d -> '.appveyor.yml'
  - extra_libs\protobuf-3.1.0 -> '.appveyor.yml'
  - extra_libs\swig-3.0.8 -> '.appveyor.yml'
  #- extra_libs\pgsql-9.6.1 -> '.appveyor.yml'
  - extra_libs\gammu-1.38.1-yadoms -> '.appveyor.yml'

# scripts that run after cloning repository
install:
  # Remove not wanted PostgreSQL pre-installed versions from the Appveyor VM
  - ps: echo "Remove not wanted PostgreSQL pre-installed versions from the Appveyor VM..."
  - ps: |
     $uninstall64 = gci "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" | foreach { gp $_.PSPath } | ? { $_ -match "PostgreSQL" } | select UninstallString
     echo $uninstall64
     foreach ( $uninstallString in $uninstall64.UninstallString ) {
        if (Test-Path "$uninstallString") {
            echo "Uninstall $uninstallString..."
            start-process "$uninstallString" "--mode unattended" -Wait
        } else {
            $alternativeUninstallString = "$uninstallString" -replace "-postgis-", "-postgis-bundle-"
            if (Test-Path "$alternativeUninstallString") {
                echo "Uninstall $alternativeUninstallString..."
                start-process "$alternativeUninstallString" "--mode unattended" -Wait
            } else {
                echo "Fail to uninstall $uninstallString"
            }
        }
     }
  # Download extra libs
  - ps: echo "Download extra libs..."
  - ps: if (!(Test-Path 'extra_libs')) { mkdir 'extra_libs' }
  - ps: pushd extra_libs
  - ps: if (!(Test-Path 'boost_1_61_0')) { Invoke-WebRequest http://yadoms.com/appveyor_build/boost_1_61_0-build.7z -OutFile boost.7z; 7z x boost.7z -bso0 }
  - ps: if (!(Test-Path 'poco-1.7.7-all')) { Invoke-WebRequest http://yadoms.com/appveyor_build/poco-1.7.7-all-build.7z -OutFile poco.7z; 7z x poco.7z -bso0 }
  - ps: if (!(Test-Path 'OpenSSL-1.1.0d')) { Invoke-WebRequest http://yadoms.com/appveyor_build/OpenSSL-1.1.0d-build.7z -OutFile OpenSSL.7z; 7z x OpenSSL.7z -bso0 }
  - ps: if (!(Test-Path 'swig-3.0.8')) { Invoke-WebRequest http://yadoms.com/appveyor_build/swig-3.0.8-build.7z -OutFile swig.7z; 7z x swig.7z -bso0 }
  - ps: if (!(Test-Path 'protobuf-3.1.0')) { Invoke-WebRequest http://yadoms.com/appveyor_build/protobuf-3.1.0-build.7z -OutFile protobuf.7z; 7z x protobuf.7z -bso0 }
  - ps: if (!(Test-Path 'pgsql')) { Invoke-WebRequest https://www.enterprisedb.com/postgresql-962-binaries-win32 -OutFile pgsql.zip; 7z x pgsql.zip -bso0 }
  - ps: if (!(Test-Path 'gammu-1.38.1-yadoms')) { Invoke-WebRequest http://yadoms.com/appveyor_build/gammu-1.38.1-yadoms-build.7z -OutFile gammu.7z; 7z x gammu.7z -bso0 }
  - ps: rm *.7z
  - ps: popd    
  - ps: echo "[END] install"

# scripts to run before build
before_build:
  # Yadoms sources
  - ps: echo "Downloading yadoms sources from $env:buildBranch branch..."
  - cmd: git clone -q --depth=1 --branch=%buildBranch% git://github.com/Yadoms/yadoms.git
  
  # Read current Yadoms version
  - ps: $YadomsVersion = (Select-String -Pattern 'YadomsVersion\("(.*)"\)' -path .\yadoms\sources\server\Version.h).Matches.Groups[1].Value
  - ps: echo "Yadoms version is $YadomsVersion"

  # Yadoms configuration file
  - ps: echo "Create Yadoms configuration file CMakeListsUserConfig.txt..."
  - ps: $cd_for_cmake="$pwd".Replace("\", "/")
  - ps: echo $cd_for_cmake
  - ps: Set-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(BOOST_ROOT "' + $cd_for_cmake + '/extra_libs/boost_1_61_0")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(POCO_ROOT "' + $cd_for_cmake + '/extra_libs/poco-1.7.7-all")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(OPENSSL_ROOT "' + $cd_for_cmake + '/extra_libs/OpenSSL-1.1.0d")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PROTOBUF_ROOT "' + $cd_for_cmake + '/extra_libs/protobuf-3.1.0")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(SWIG_ROOT "' + $cd_for_cmake + '/extra_libs/swig-3.0.8")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PostgreSQL_ROOT "' + $cd_for_cmake + '/extra_libs/pgsql")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PostgreSQL_INCLUDE_DIR "' + $cd_for_cmake + '/extra_libs/pgsql/include")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PostgreSQL_LIBRARY_DIR "' + $cd_for_cmake + '/extra_libs/pgsql/lib")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(GAMMU_ROOT "' + $cd_for_cmake + '/extra_libs/gammu-1.38.1-yadoms")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PYTHON_ROOT "C:/Python27")')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(COTIRE_USE ON)')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(COTIRE_USE_UNITY ON)')
  - ps: Add-Content 'yadoms/sources/CMakeListsUserConfig.txt' ('set(PYTHON_USE_SOURCES OFF)')
  - ps: cat 'yadoms/sources/CMakeListsUserConfig.txt'

  # For CMake version < 3.9, overwrite FindProtobuf.cmake
  - ps: Invoke-WebRequest https://gitlab.kitware.com/cmake/cmake/raw/master/Modules/FindProtobuf.cmake -OutFile 'C:/Program Files (x86)/CMake/share/cmake-3.7/Modules/FindProtobuf.cmake'
  
  # Create solution
  - ps: pushd yadoms
  - cmd: cmake_windows.cmd
  - ps: popd
  
build: off
  # Use custom build
  
build_script:
  # Build and create installer
  - ps: pushd yadoms/projects
  - ps: echo 'Build...'
  - ps: msbuild shared/all_unity.vcxproj /p:Configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  - ps: echo 'Finalize output...'
  - ps: cp ../config/yadoms.ini ../builds/$(configuration)/
  - ps: rm ../builds/$(configuration)/.gitignore
  - ps: echo 'Create packages...'
  - ps: msbuild PACKAGE.vcxproj /p:Configuration=Release /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
  - ps: popd
  - ps: echo 'yadoms/builds/$(configuration)/Yadoms-$(Yadoms)Version-win32.exe'

artifacts:
  - path: yadoms/builds/package/Yadoms-*.exe
    name: 'Yadoms installer'
    
  - path: yadoms/builds/package/Yadoms-*.zip
    name: 'Yadoms portable'
    
deploy:
  - provider: FTP
    protocol: ftp
    host: ftp.jano42.fr
    username: janofnxr-yadoms
    password:
      secure: 8tosT9FAJxX+SRgkw02I1A==
    folder: appveyor_build/win32
    debug: true     # show complete FTP log